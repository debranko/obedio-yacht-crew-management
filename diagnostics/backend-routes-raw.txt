backend/src/routes/activity-logs.ts:9:router.get('/', requirePermission('system.view-logs'), asyncHandler(async (req, res) => {
backend/src/routes/activity-logs.ts:16:router.post('/', requirePermission('system.view-logs'), asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:22:router.get('/', asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:61:router.get('/by-date/:date', asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:84:router.get('/by-week/:startDate', asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:122:router.get('/crew/:crewMemberId', asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:154:router.get('/:id', asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:176:router.post('/', validate(CreateAssignmentSchema), asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:212:router.post('/bulk', asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:249:router.put('/:id', validate(UpdateAssignmentSchema), asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:269:router.delete('/:id', asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:284:router.delete('/by-date/:date', requirePermission('assignments.delete'), asyncHandler(async (req, res) => {
backend/src/routes/assignments.ts:302:router.delete('/crew/:crewMemberId', asyncHandler(async (req, res) => {
backend/src/routes/auth.ts:23:router.post('/login', loginLimiter, async (req, res) => {
backend/src/routes/auth.ts:113:router.post('/refresh', strictRateLimiter, async (req, res) => {
backend/src/routes/auth.ts:193:router.get('/verify', async (req, res) => {
backend/src/routes/auth.ts:257:router.post('/setup-password', async (req, res) => {
backend/src/routes/auth.ts:342:router.post('/logout', (req, res) => {
backend/src/routes/backup.ts:38:router.get('/settings', asyncHandler(async (_, res) => {
backend/src/routes/backup.ts:59:router.put('/settings', asyncHandler(async (req, res) => {
backend/src/routes/backup.ts:90:router.get('/status', asyncHandler(async (_, res) => {
backend/src/routes/backup.ts:150:router.post('/create', asyncHandler(async (req, res) => {
backend/src/routes/backup.ts:205:router.post('/restore/:filename', asyncHandler(async (req, res) => {
backend/src/routes/backup.ts:246:router.delete('/:filename', asyncHandler(async (req, res) => {
backend/src/routes/backup.ts:266:router.get('/download/:filename', asyncHandler(async (req, res) => {
backend/src/routes/crew-change-logs.ts:8:router.get('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/crew-change-logs.ts:113:router.post('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/crew-change-logs.ts:151:router.get('/crew/:crewMemberId', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/crew-change-logs.ts:170:router.post('/bulk', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/crew-change-logs.ts:239:router.get('/recent', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/dashboard.ts:32:router.get('/layout', authMiddleware, asyncHandler(async (req, res) => {
backend/src/routes/dashboard.ts:61:router.put('/layout', authMiddleware, asyncHandler(async (req, res) => {
backend/src/routes/dashboard.ts:102:router.post('/reset', authMiddleware, asyncHandler(async (req, res) => {
backend/src/routes/dashboard.ts:131:router.get('/defaults/:role', requirePermission('settings.manage'), asyncHandler(async (req, res) => {
backend/src/routes/device-discovery.ts:23:router.post('/discover', authMiddleware, asyncHandler(async (req, res) => {
backend/src/routes/device-discovery.ts:40:router.get('/pairing', authMiddleware, asyncHandler(async (req, res) => {
backend/src/routes/device-discovery.ts:58:router.post('/pair/:deviceId', authMiddleware, asyncHandler(async (req, res) => {
backend/src/routes/device-discovery.ts:151:router.post('/simulate-announce', asyncHandler(async (req, res) => {
backend/src/routes/device-discovery.ts:174:router.delete('/pairing/:deviceId', authMiddleware, asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:18:router.get('/logs', requirePermission('devices.view'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:131:router.get('/stats/summary', requirePermission('devices.view'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:162:router.get('/', requirePermission('devices.view'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:192:router.get('/:id', requirePermission('devices.view'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:216:router.post('/', requirePermission('devices.add'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:245:router.put('/:id', requirePermission('devices.edit'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:318:router.delete('/:id', requirePermission('devices.delete'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:330:router.get('/:id/config', requirePermission('devices.view'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:355:router.put('/:id/config', requirePermission('devices.edit'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:390:router.post('/:id/test', deviceTestRateLimiter, requirePermission('devices.edit'), asyncHandler(async (req, res) => {
backend/src/routes/devices.ts:437:router.get('/:id/logs', requirePermission('devices.view'), asyncHandler(async (req, res) => {
backend/src/routes/guests.ts:12:router.get('/', asyncHandler(async (req, res) => {
backend/src/routes/guests.ts:168:router.get('/stats', requirePermission('guests.view'), asyncHandler(async (req, res) => {
backend/src/routes/guests.ts:210:router.get('/meta', requirePermission('guests.view'), asyncHandler(async (req, res) => {
backend/src/routes/guests.ts:247:router.post('/', validate(CreateGuestSchema), asyncHandler(async (req, res) => {
backend/src/routes/guests.ts:255:router.get('/:id', async (req, res) => {
backend/src/routes/guests.ts:275:router.put('/:id', validate(UpdateGuestSchema), asyncHandler(async (req, res) => {
backend/src/routes/guests.ts:323:router.delete('/:id', asyncHandler(async (req, res) => {
backend/src/routes/messages.ts:9:router.get('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/messages.ts:75:router.get('/conversation/:otherUserId', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/messages.ts:125:router.post('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/messages.ts:180:router.put('/:messageId/read', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/messages.ts:212:router.put('/mark-all-read', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/messages.ts:238:router.delete('/:messageId', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/messages.ts:271:router.get('/unread-count', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/notification-settings.ts:8:router.get('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/notification-settings.ts:40:router.put('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/notification-settings.ts:106:router.post('/push-token', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/notification-settings.ts:140:router.post('/test', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/role-permissions.ts:77:router.get('/roles/:role', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/role-permissions.ts:107:router.get('/roles', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/role-permissions.ts:118:router.put('/roles/:role', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/role-permissions.ts:146:router.post('/roles/:role/reset', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/service-categories.ts:15:router.get('/', requirePermission('settings.view'), asyncHandler(async (req, res) => {
backend/src/routes/service-categories.ts:30:router.post('/', requirePermission('settings.edit'), asyncHandler(async (req, res) => {
backend/src/routes/service-categories.ts:66:router.put('/:id', requirePermission('settings.edit'), asyncHandler(async (req, res) => {
backend/src/routes/service-categories.ts:92:router.delete('/:id', requirePermission('settings.edit'), asyncHandler(async (req, res) => {
backend/src/routes/service-categories.ts:121:router.put('/reorder', requirePermission('settings.edit'), asyncHandler(async (req, res) => {
backend/src/routes/service-request-history.ts:8:router.get('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/service-request-history.ts:69:router.post('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/service-request-history.ts:107:router.get('/request/:serviceRequestId', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/service-request-history.ts:124:router.get('/completed', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/service-requests.ts:15:router.get('/', requirePermission('service-requests.view'), asyncHandler(async (req, res) => {
backend/src/routes/service-requests.ts:22:router.post('/', requirePermission('service-requests.create'), validate(CreateServiceRequestSchema), asyncHandler(async (req, res) => {
backend/src/routes/service-requests.ts:31:router.post('/:id/accept', requirePermission('service-requests.accept'), asyncHandler(async (req, res) => {
backend/src/routes/service-requests.ts:49:router.post('/:id/complete', requirePermission('service-requests.complete'), asyncHandler(async (req, res) => {
backend/src/routes/settings.ts:8:router.get('/all', authMiddleware, async (req: any, res) => {
backend/src/routes/settings.ts:108:router.get('/system-status', authMiddleware, async (req, res) => {
backend/src/routes/shifts.ts:21:router.get('/', asyncHandler(async (_, res) => {
backend/src/routes/shifts.ts:42:router.get('/active', asyncHandler(async (_, res) => {
backend/src/routes/shifts.ts:64:router.get('/:id', asyncHandler(async (req, res) => {
backend/src/routes/shifts.ts:92:router.post('/', validate(CreateShiftSchema), asyncHandler(async (req, res) => {
backend/src/routes/shifts.ts:108:router.put('/:id', validate(UpdateShiftSchema), asyncHandler(async (req, res) => {
backend/src/routes/shifts.ts:125:router.delete('/:id', asyncHandler(async (req, res) => {
backend/src/routes/shifts.ts:140:router.post('/:id/toggle-active', asyncHandler(async (req, res) => {
backend/src/routes/shifts.ts:159:router.post('/reorder', asyncHandler(async (req, res) => {
backend/src/routes/smart-buttons.ts:15:router.post('/press', asyncHandler(async (req, res) => {
backend/src/routes/smart-buttons.ts:48:router.post('/status/:deviceId', asyncHandler(async (req, res) => {
backend/src/routes/smart-buttons.ts:61:router.post('/telemetry/:deviceId', asyncHandler(async (req, res) => {
backend/src/routes/smart-buttons.ts:74:router.post('/test/:deviceId', asyncHandler(async (req, res) => {
backend/src/routes/smart-buttons.ts:91:router.get('/mqtt-status', asyncHandler(async (req, res) => {
backend/src/routes/system-settings.ts:21:router.get('/', asyncHandler(async (_, res) => {
backend/src/routes/system-settings.ts:84:router.put('/', asyncHandler(async (req, res) => {
backend/src/routes/system-settings.ts:119:router.get('/health', asyncHandler(async (_, res) => {
backend/src/routes/transcribe.ts:57:router.post('/', upload.single('audio'), async (req, res) => {
backend/src/routes/transcribe.ts:125:router.get('/test', (req, res) => {
backend/src/routes/upload.ts:54:router.post('/image', authMiddleware, upload.single('image'), (req, res) => {
backend/src/routes/upload.ts:91:router.delete('/image/:filename', authMiddleware, (req, res) => {
backend/src/routes/user-preferences.ts:16:router.get('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/user-preferences.ts:55:router.put('/dashboard', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/user-preferences.ts:96:router.put('/theme', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/user-preferences.ts:130:router.delete('/dashboard', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/yacht-settings.ts:8:router.get('/', authMiddleware, async (req: Request, res: Response) => {
backend/src/routes/yacht-settings.ts:48:router.put('/', authMiddleware, async (req: Request, res: Response) => {
