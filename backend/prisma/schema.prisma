generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  email        String        @unique
  password     String
  role         String        // "admin","chief-stewardess","stewardess","crew","eto"
  firstName    String?
  lastName     String?
  isActive     Boolean       @default(true)
  lastLogin    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  crewMember   CrewMember?
  activityLogs ActivityLog[]
}

model CrewMember {
  id         String   @id @default(cuid())
  name       String
  position   String
  department String
  status     String   @default("active") // "on-duty","off-duty","on-leave"
  contact    String?
  email      String?
  joinDate   DateTime?
  role       String?
  userId     String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user              User?               @relation(fields: [userId], references: [id])
  deviceAssignments DeviceAssignment[]
}

model Location {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String
  floor       String?  // Yacht deck or building floor: Sun Deck, Main Deck, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  guests          Guest[]
  serviceRequests ServiceRequest[]
}

model Guest {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  preferredName  String?
  photo          String?
  type           String   @default("guest")
  status         String   @default("onboard")
  nationality    String?
  languages      String[] @default([])
  passportNumber String?
  locationId     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  location        Location?        @relation(fields: [locationId], references: [id])
  serviceRequests ServiceRequest[]
}

model ServiceRequest {
  id          String   @id @default(cuid())
  requestType String   @default("call")
  guestId     String?
  locationId  String?
  cabinId     String?
  priority    String   @default("normal")
  status      String   @default("open")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  guest    Guest?    @relation(fields: [guestId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
}

model Device {
  id           String   @id @default(cuid())
  name         String
  type         String
  deviceId     String   @unique
  status       String   @default("active")
  batteryLevel Int?
  lastSeen     DateTime?
  locationId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  assignments DeviceAssignment[]
}

model DeviceAssignment {
  id           String   @id @default(cuid())
  deviceId     String
  crewMemberId String
  assignedAt   DateTime @default(now())
  notes        String?
  
  device      Device     @relation(fields: [deviceId], references: [id])
  crewMember  CrewMember @relation(fields: [crewMemberId], references: [id])
  
  @@unique([deviceId, crewMemberId])
}

// Assignment and ShiftConfig models removed - user requested complete removal of duty timer functionality

model ActivityLog {
  id         String   @id @default(cuid())
  type       String
  action     String
  details    String?
  userId     String?
  locationId String?
  metadata   String?
  createdAt  DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
}