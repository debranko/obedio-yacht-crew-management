generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  email        String        @unique
  password     String
  role         String        // "admin","chief-stewardess","stewardess","crew","eto"
  firstName    String?
  lastName     String?
  isActive     Boolean       @default(true)
  lastLogin    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  crewMember   CrewMember?
  activityLogs ActivityLog[]
  preferences  UserPreferences?
}

model UserPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Dashboard Layout & Widgets
  dashboardLayout   Json?    // Widget positions and sizes
  activeWidgets     Json?    // Array of active widget IDs
  
  // UI Preferences
  theme             String   @default("light") // "light", "dark", "auto"
  language          String   @default("en")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CrewMember {
  id         String   @id @default(cuid())
  name       String
  position   String
  department String
  status     String   @default("active") // "on-duty","off-duty","on-leave"
  contact    String?
  email      String?
  joinDate   DateTime?
  role       String?
  userId     String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user              User?               @relation(fields: [userId], references: [id])
  deviceAssignments DeviceAssignment[]
  devices           Device[]
}

model Location {
  id             String   @id @default(cuid())
  name           String   @unique
  type           String
  floor          String?  // Yacht deck or building floor: Sun Deck, Main Deck, etc.
  description    String?
  image          String?  // URL to location image/photo
  smartButtonId  String?  // ESP32 smart button device ID assigned to this location
  doNotDisturb   Boolean  @default(false) // Do Not Disturb status
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  guests          Guest[]
  serviceRequests ServiceRequest[]
  devices         Device[]
}

model Guest {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  preferredName  String?
  photo          String?
  type           String   @default("guest")
  status         String   @default("onboard")
  nationality    String?
  languages      String[] @default([])
  passportNumber String?
  locationId     String?
  
  // Accommodation & Check-in Info
  checkInDate    DateTime?
  checkOutDate   DateTime?
  
  // Dietary & Medical
  allergies              String[] @default([])
  dietaryRestrictions    String[] @default([])
  medicalConditions      String[] @default([])
  
  // Preferences & Notes
  preferences            String?  // General preferences
  notes                  String?  // Staff notes
  
  // Emergency Contact
  emergencyContactName   String?
  emergencyContactPhone  String?
  emergencyContactRelation String?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  location        Location?        @relation(fields: [locationId], references: [id])
  serviceRequests ServiceRequest[]
}

model ServiceRequest {
  id          String   @id @default(cuid())
  requestType String   @default("call")
  guestId     String?
  locationId  String?
  cabinId     String?
  priority    String   @default("normal")
  status      String   @default("open")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  guest    Guest?    @relation(fields: [guestId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
}

model Device {
  id              String    @id @default(cuid())
  deviceId        String    @unique  // BTN-001, WCH-001, RPT-001, APP-IOS-001
  name            String
  type            String    // "smart_button", "watch", "repeater", "mobile_app"
  subType         String?   // "ios", "android", "esp32"
  status          String    @default("online") // "online", "offline", "low_battery", "error"
  
  // Location & Assignment
  locationId      String?
  location        Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  crewMemberId    String?
  crewMember      CrewMember? @relation(fields: [crewMemberId], references: [id], onDelete: SetNull)
  
  // Status Monitoring
  batteryLevel    Int?      // 0-100
  signalStrength  Int?      // RSSI in dBm (-120 to 0)
  connectionType  String?   // "lora_868", "lora_915", "lora_433", "wifi", "bluetooth"
  lastSeen        DateTime?
  
  // Configuration (JSON - flexible per device type)
  config          Json?     // Button actions, LED, audio, repeater settings, etc.
  
  // Metadata
  firmwareVersion String?
  hardwareVersion String?
  macAddress      String?
  ipAddress       String?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  assignments     DeviceAssignment[]
  logs            DeviceLog[]
}

model DeviceLog {
  id         String   @id @default(cuid())
  deviceId   String
  device     Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  
  eventType  String   // "button_press", "battery_low", "offline", "config_change", "test_signal"
  eventData  Json?    // Additional event details
  severity   String   @default("info") // "info", "warning", "error"
  
  createdAt  DateTime @default(now())
  
  @@index([deviceId])
  @@index([eventType])
  @@index([createdAt])
}

model DeviceAssignment {
  id           String   @id @default(cuid())
  deviceId     String
  crewMemberId String
  assignedAt   DateTime @default(now())
  notes        String?
  
  device      Device     @relation(fields: [deviceId], references: [id])
  crewMember  CrewMember @relation(fields: [crewMemberId], references: [id])
  
  @@unique([deviceId, crewMemberId])
}

// Assignment and ShiftConfig models removed - user requested complete removal of duty timer functionality

model ActivityLog {
  id         String   @id @default(cuid())
  type       String
  action     String
  details    String?
  userId     String?
  locationId String?
  metadata   String?
  createdAt  DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id])
}