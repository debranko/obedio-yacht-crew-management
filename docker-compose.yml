# Docker Compose configuration for OBEDIO
# Complete stack: Frontend, Backend, PostgreSQL, MQTT Broker

version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: obedio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-obedio}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obedio-network

  # MQTT Broker (Eclipse Mosquitto)
  mqtt:
    image: eclipse-mosquitto:2
    container_name: obedio-mqtt
    restart: unless-stopped
    ports:
      - "${MQTT_PORT:-1883}:1883"
      - "${MQTT_WS_PORT:-9001}:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - obedio-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: obedio-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mqtt:
        condition: service_started
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-obedio}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      MQTT_BROKER_URL: mqtt://mqtt:1883
      MQTT_MONITOR_PORT: ${MQTT_MONITOR_PORT:-8888}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
      - "${MQTT_MONITOR_PORT:-8888}:8888"
    volumes:
      - backend-uploads:/app/uploads
      - backend-backups:/app/backups
    networks:
      - obedio-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Nginx + React)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: obedio-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    networks:
      - obedio-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres-data:
    driver: local
  backend-uploads:
    driver: local
  backend-backups:
    driver: local

networks:
  obedio-network:
    driver: bridge